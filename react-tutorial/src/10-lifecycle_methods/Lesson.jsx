/*
lifecycle (old):
  Mounting (монтироание компоненты в DOM-дереве, Первое появление):
    Mounting - это конструктор, конструктор- это такой специальный метод, который будет вызываться всякий раз когда создается новый объект.
    В целом конструктор это отличное место для инициализации компоненты или инициализации состояния компоненты на основе полученных пропсов.

    componentWillMount(устаревший метод) - служил для установления дефолтных данных, необходимых для работы компоненты. Вызывался он лишь
                                          один раз в самом начале жизненного цикла. Этот метод использовали для отправки запросов на получение
                                          данных, для того, чтобы отрендерить компоненту с полученными данными. Но несмотря на то, что запрос
                                          инициализировался непосредственно перед render он не успевал выполняться, в результате чего рендеринг
                                          происходил 2 раза. А после релиза 16-й версии перерендер мог происходить и большее количество раз.
                                          Этот метод вызывается когда используется server-side rendering, когда его противоположность - 
                                          componentDidMount не будет вызвано на сервере, а будет вызвано на клиенте. Поэтому, если некоторый
                                          side effect нацелен на серверную часть этот метод может быть использован как исключение.
    -----------------------------------------------------------------------------------------------------------------------------------------
    componentDidMount - довольно простой метод, т.к. он будет вызван лишь раз во всем жизненном цикле компоненты и будет говорить о том, что
                       компонента и все ее дочерние компоненты отрисовались без ошибок. И соответственно, т.к. этот метод вызывается лишь раз,
                       то это превосходный кандидат для выполнения любых side effects.
  ======================================================================================================================================
  Updation (Обновление компоненты или перерендеринг):

    componentWillReceiveProps(устаревший метод) - данный метод будет вызываться если компонента получила новые пропсы, сам же метод принимает значение
                                                  nextProps, которое и является объектом с обновленными пропсами, причем со всеми пропсами, даже теми,
                                                  которые не обновились. Этот метод будет идеален, если у нас есть какая-нибудь компонента, часть state
                                                  которой зависит от передаваемых от родительской компоненты пропсов.
    ---------------------------------------------------------------------------------------------------------------------------------------------
    shouldComponentUpdate(nextProps, nextState, nextContext) - данный метод говорит должна ли компонента обновиться или нет, возвращает булевое значение
                            от которого и будет зависеть обновление.
                            Метод принимает 3 аргумента: nextProps, nextState и nextContext. Внутри функции, получая доступ к этим аргументам,
                            мы можем сравнивать значения от которых зависит перерендеринг нашей компоненты, и либо обновлять ее, либо нет. Внутри данного
                            метода нельзя вызывать setState, т.к. это приведет к бесконечной перерисовке компоненты. Если перерисовка компоненты довольно
                            тяжелая, то этот метод идеально подходит.
    ------------------------------------------------------------------------------------------------------------------------------------------------
    componentWillUpdate(nextProps, nextState)(устаревший метод) - эта функция в основном используется для того, чтобы сделать синхронизацию между state и props в случае, если
                                            часть состояния компоненты зависит от каких-либо пропсов, если мы не добавили метод shouldComponentUpdate,
                                            если же shouldComponentUpdate был добавлен, то componentWillUpdate может быть использован вместо
                                            componentWillReceiveProps, т.к. он будет вызываться только тогда, когда когда компонента действительно
                                            будет перерисована. Этот метод может быть вызван несколько раз перед методом render, а соответственно
                                            в нем так же не рекомендуется выполнять операции side effect, например запросы.
    --------------------------------------------------------------------------------------------------------------------------------------------------
    componentDidUpdate(prevProps, prevState, prevContext) - вызывается после того, как элемент или компонента уже отрендерились. Этот метод является единственным методом, который
                        гарантированно будет вызван только раз в каждом цикле перерисовки, поэтому любые side effects рекомендуется выполнять
                        именно здесь. Как и методы componentWillUpdate и componentWillReceiveProps в этот метод передаются предыдущие пропсы,
                        state и контекст, даже если в них не было изменений. Поэтому нам, как разработчикам, необходимо в ручную проверять переданные
                        значения на изменения и только потом производить различные операции обновления.
  ===================================================================================================================================================
  Unmounting (размонтирование компоненты из DOM):
    componentWillUnmount - используется для очистки компоненты, т.е. если она использует какие-нибудт таймеры (setTimeout, setInterval), либо
                          производит любые операции которые нуждаются в закрытии или удалении.

===================================================================================================================================================
===================================================================================================================================================
lifecycle (new):

  getDerivedStateFromProps - основная задача этого метода убедиться, что state и props синхронизированы когда это необходимо. Его основной смысл -
                            это замена componentWillReceiveProps. Это статический метод (перед ним пишется ключевое слово static) и поэтому у него
                            нет доступа к this. Вместо этого нужно вернуть объект, который будет смержен в будущее состояние компоненты. Этот метод
                            используется тогда, когда компонента обновляется, а так же, когда она монтируется сразу после вызова конструктора. Поэтому,
                            используя этот метод не нужно использовать конструктор. Если есть необходимость установить начальное состояние компоненты
                            из пропсов метод принимает аргументы: nextProps и prevState.
  -----------------------------------------------------------------------------------------------------------------------------------------------------
  getSnapshotBeforeUpdate - вызывается в так называемой “pre-commit фазе”, прямо перед изменениями из VDOM, которые должны быть отображены в DOM.
                            Его можно использовать в основном, если нам нужно прочитать текущее состояние DOM.
                            Например у нас есть приложение, в котором новые сообщения добавляются сверху экрана – если пользователь будет скроллить вниз,
                            и добавится новое сообщение, экран будет "прыгать" и это сделает UI тяжелее в использовании. Добавлением getSnapshotBeforeUpdate
                            мы сможем рассчитать текущее положение скролла и восстанавливать его через апдейт DOM-а.
  -------------------------------------------------------------------------------------------------------------------------------------------------------
  componentDidCatch(errorString, errorInfo) - он позволяет реагировать на события, происходящие в дочернем компоненте, а конкретно на любые неперехваченные
                                              ошибки в любом из дочерних компонентов.
                                              С помощью этого дополнения мы можем сделать наш родительский элемент обработчиком ошибок. Эти ошибки можно
                                              отлавливать, заводить в state и рендерить как какие-нибудь нормальные компоненты с сообщениями об ошибках,
                                              например модальные окна.
                                              Данный метод принимает 2 аргумента:
                                                errorString - .toString() сообщение о ошибке
                                                errorInfo - объект с одним полем componentStack, которое содержит стектрейс, поясняющий где произошла ошибка.
*/